"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = __importDefault(require("graphql-tag"));
module.exports = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    # Model types\n    type User {\n        id: Int\n        name: String\n        email: String\n        createdAt: String\n        updatedAt: String\n        comments: ModelCommentConnection\n        posts: ModelPostConnection\n    }\n\n    type Post {\n        id: Int\n        title: String\n        content: String\n        userId: String\n        createdAt: String\n        updatedAt: String\n        user: User\n        comments: ModelCommentConnection\n    }\n\n    type Comment {\n        id: Int\n        postId: Int\n        userId: Int\n        comment: String\n        createdAt: String\n        updatedAt: String\n        post: Post\n        user: User\n    }\n\n    # Query types\n    type Query {\n        getPost(id: Int!): Post\n        getUser(id: Int!): User\n        listPosts(offset: Int, limit: Int): ModelPostConnection\n        listUsers(offset: Int, limit: Int): ModelUserConnection\n    }\n\n    type ModelUserConnection {\n        items: [User]\n    }\n\n    type ModelCommentConnection {\n        items: [Comment]\n    }\n\n    type ModelPostConnection {\n        items: [Post]\n    }\n\n    # Mutation types\n    type Mutation {\n        createUser(input: CreateUserInput!): User!\n        updateUser(input: UpdateUserInput!): User!\n        deleteUser(input: DeleteUserInput!): User!\n        createPost(input: CreatePostInput!): Post!\n        updatePost(input: UpdatePostInput!): Post!\n        deletePost(input: DeletePostInput!): Post!\n        createComment(input: CreateCommentInput!): Comment!\n        updateComment(input: UpdateCommentInput!): Comment!\n        deleteComment(input: DeleteCommentInput!): Comment!\n    }\n\n    input CreateUserInput {\n        id: Int\n        name: String!\n        email: String!\n    }\n\n    input UpdateUserInput {\n        id: Int!\n        name: String\n        email: String\n    }\n\n    input DeleteUserInput {\n        id: Int\n    }\n\n    input CreatePostInput {\n        id: Int\n        title: String!\n        content: String!\n    }\n\n    input UpdatePostInput {\n        id: Int!\n        title: String\n        content: String\n    }\n\n    input DeletePostInput {\n        id: Int\n    }\n\n    input CreateCommentInput {\n        id: Int\n        postId: Int!\n        comment: String!\n    }\n\n    input UpdateCommentInput {\n        id: Int!\n        comment: String\n    }\n\n    input DeleteCommentInput {\n        id: Int\n    }\n"], ["\n    # Model types\n    type User {\n        id: Int\n        name: String\n        email: String\n        createdAt: String\n        updatedAt: String\n        comments: ModelCommentConnection\n        posts: ModelPostConnection\n    }\n\n    type Post {\n        id: Int\n        title: String\n        content: String\n        userId: String\n        createdAt: String\n        updatedAt: String\n        user: User\n        comments: ModelCommentConnection\n    }\n\n    type Comment {\n        id: Int\n        postId: Int\n        userId: Int\n        comment: String\n        createdAt: String\n        updatedAt: String\n        post: Post\n        user: User\n    }\n\n    # Query types\n    type Query {\n        getPost(id: Int!): Post\n        getUser(id: Int!): User\n        listPosts(offset: Int, limit: Int): ModelPostConnection\n        listUsers(offset: Int, limit: Int): ModelUserConnection\n    }\n\n    type ModelUserConnection {\n        items: [User]\n    }\n\n    type ModelCommentConnection {\n        items: [Comment]\n    }\n\n    type ModelPostConnection {\n        items: [Post]\n    }\n\n    # Mutation types\n    type Mutation {\n        createUser(input: CreateUserInput!): User!\n        updateUser(input: UpdateUserInput!): User!\n        deleteUser(input: DeleteUserInput!): User!\n        createPost(input: CreatePostInput!): Post!\n        updatePost(input: UpdatePostInput!): Post!\n        deletePost(input: DeletePostInput!): Post!\n        createComment(input: CreateCommentInput!): Comment!\n        updateComment(input: UpdateCommentInput!): Comment!\n        deleteComment(input: DeleteCommentInput!): Comment!\n    }\n\n    input CreateUserInput {\n        id: Int\n        name: String!\n        email: String!\n    }\n\n    input UpdateUserInput {\n        id: Int!\n        name: String\n        email: String\n    }\n\n    input DeleteUserInput {\n        id: Int\n    }\n\n    input CreatePostInput {\n        id: Int\n        title: String!\n        content: String!\n    }\n\n    input UpdatePostInput {\n        id: Int!\n        title: String\n        content: String\n    }\n\n    input DeletePostInput {\n        id: Int\n    }\n\n    input CreateCommentInput {\n        id: Int\n        postId: Int!\n        comment: String!\n    }\n\n    input UpdateCommentInput {\n        id: Int!\n        comment: String\n    }\n\n    input DeleteCommentInput {\n        id: Int\n    }\n"])));
var templateObject_1;
